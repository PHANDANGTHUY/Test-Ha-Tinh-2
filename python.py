# -*- coding: utf-8 -*-
"""
Streamlit app: Th·∫©m ƒë·ªãnh ph∆∞∆°ng √°n kinh doanh/ s·ª≠ d·ª•ng v·ªën (pasdv.docx)
"""
import io
import os
import re
import math
import json
import zipfile
import datetime as dt
from typing import Dict, Any, Tuple, Optional

import numpy as np
import pandas as pd
import streamlit as st

# Docx parsing
try:
    from docx import Document
except Exception:
    Document = None

# Gemini
try:
    import google.generativeai as genai
except Exception:
    genai = None

# Plotly cho bi·ªÉu ƒë·ªì
try:
    import plotly.graph_objects as go
    import plotly.express as px # Th√™m plotly.express
except Exception:
    go = None
    px = None

st.set_page_config(page_title="PASDV - Th·∫©m ƒë·ªãnh ph∆∞∆°ng √°n", page_icon="üíº", layout="wide")


# ========================== Helpers ==========================
FIELD_DEFAULTS = {
    "ten_khach_hang": "",
    "cccd": "",
    "noi_cu_tru": "",
    "so_dien_thoai": "",
    "muc_dich_vay": "",
    "tong_nhu_cau_von": 0.0,
    "von_doi_ung": 0.0,
    "so_tien_vay": 0.0,
    "lai_suat_nam": 10.0,
    "thoi_gian_vay_thang": 12,
    "ky_han_tra": "Th√°ng",
    "thu_nhap_thang": 0.0,
    "gia_tri_tsdb": 0.0,
    "tong_no_hien_tai": 0.0,
    "loi_nhuan_rong_nam": 0.0,
    "tong_von_dau_tu": 0.0,
}

def vnd_to_float(s: str) -> float:
    """Chuy·ªÉn ƒë·ªïi chu·ªói ti·ªÅn t·ªá VND (d·∫•u ch·∫•m l√† ph√¢n c√°ch h√†ng ngh√¨n) sang s·ªë float"""
    if s is None:
        return 0.0
    # X√≥a d·∫•u ph√¢n c√°ch h√†ng ngh√¨n (d·∫•u ch·∫•m) v√† c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë/d·∫•u tr·ª´
    s = str(s).replace(".", "").replace(",", "").replace(" ", "")
    s = s.replace("ƒë", "").replace("VND", "").replace("vnƒë", "").replace("‚Ç´", "")
    s = re.sub(r"[^\d\-]", "", s)
    try:
        return float(s)
    except Exception:
        return 0.0

# START: Y√äU C·∫¶U 2 - ƒê·ªäNH D·∫†NG S·ªê QU·ªêC T·∫æ
def format_currency_intl(amount: float) -> str:
    """ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn theo ti√™u chu·∫©n qu·ªëc t·∫ø (v√≠ d·ª•: 1,234,567.00)"""
    # S·ª≠ d·ª•ng f"{amount:,.0f}" s·∫Ω m·∫∑c ƒë·ªãnh d√πng d·∫•u ph·∫©y cho h√†ng ngh√¨n (ti√™u chu·∫©n qu·ªëc t·∫ø)
    return f"{amount:,.0f}"

def format_currency_intl_float(amount: float) -> str:
    """ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n theo ti√™u chu·∫©n qu·ªëc t·∫ø (v√≠ d·ª•: 1,234,567.89)"""
    return f"{amount:,.2f}"

# C·∫≠p nh·∫≠t h√†m format_vnd c≈© th√†nh format_currency_intl cho code m·ªõi
# def format_vnd(amount: float) -> str:
#     """ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn VND v·ªõi d·∫•u ch·∫•m ngƒÉn c√°ch h√†ng ngh√¨n"""
#     return f"{amount:,.0f}".replace(",", ".") # Logic c≈©

# END: Y√äU C·∫¶U 2 - ƒê·ªäNH D·∫†NG S·ªê QU·ªêC T·∫æ

def percent_to_float(s: str) -> float:
    """Chuy·ªÉn ƒë·ªïi chu·ªói ph·∫ßn trƒÉm sang s·ªë float"""
    if s is None:
        return 0.0
    s = str(s).replace(",", ".")
    m = re.search(r"(\d+(?:\.\d+)?)", s)
    return float(m.group(1)) if m else 0.0

def extract_from_docx(file_bytes: bytes) -> Dict[str, Any]:
    """
    ƒê·ªçc .docx PASDV v√† tr√≠ch xu·∫•t th√¥ng tin theo c·∫•u tr√∫c th·ª±c t·∫ø.
    X·ª≠ l√Ω nhi·ªÅu ng∆∞·ªùi vay, c√°c tr∆∞·ªùng ƒë·∫∑c th√π c·ªßa Agribank.
    """
    data = FIELD_DEFAULTS.copy()
    if Document is None:
        return data

    bio = io.BytesIO(file_bytes)
    doc = Document(bio)
    full_text = "\n".join([p.text for p in doc.paragraphs])
    
    # Chu·∫©n h√≥a: lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a nh∆∞ng gi·ªØ nguy√™n d√≤ng
    lines = [line.strip() for line in full_text.split('\n') if line.strip()]
    full_text = "\n".join(lines)

    # === 1. TH√îNG TIN KH√ÅCH H√ÄNG ===
    ten_pattern = r"(?:1\.\s*)?H·ªç\s*t√™n\s*(?:KH)?\s*[*]*\s*[:Ôºö]\s*[*]*\s*([A-Z√Ä√Å·∫¢√É·∫†ƒÇ·∫∞·∫Æ·∫≤·∫¥·∫∂√Ç·∫¶·∫§·∫®·∫™·∫¨ƒê√à√â·∫∫·∫º·∫∏√ä·ªÄ·∫æ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªí·ªê·ªî·ªñ·ªò∆†·ªú·ªö·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª™·ª®·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥][a-z√†√°·∫£√£·∫°ƒÉ·∫±·∫Ø·∫≥·∫µ·∫∑√¢·∫ß·∫•·∫®·∫´·∫≠ƒë√®√©·∫ª·∫Ω·∫π√™·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªì·ªë·ªï·ªó·ªô∆°·ªù·ªõ·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµA-Z√Ä√Å·∫¢√É·∫†ƒÇ·∫∞·∫Æ·∫≤·∫¥·∫∂√Ç·∫¶·∫§·∫®·∫™·∫¨ƒê√à√â·∫∫·∫º·∫∏√ä·ªÄ·∫æ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªí·ªê·ªî·ªñ·ªò∆†·ªú·ªö·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª™·ª®·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥\s]+)"
    m = re.search(ten_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["ten_khach_hang"] = m.group(1).strip()

    cccd_pattern = r"(?:CCCD|CMND)\s*[:Ôºö]\s*(\d{9,12})"
    m = re.search(cccd_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["cccd"] = m.group(1).strip()

    noi_cu_tru_pattern = r"N∆°i\s*c∆∞\s*tr√∫\s*[:Ôºö]\s*([^\n]+?)(?=\n|S·ªë\s*ƒëi·ªán\s*tho·∫°i|$)"
    m = re.search(noi_cu_tru_pattern, full_text, flags=re.IGNORECASE | re.DOTALL)
    if m:
        data["noi_cu_tru"] = m.group(1).strip()

    sdt_pattern = r"S·ªë\s*ƒëi·ªán\s*tho·∫°i\s*[:Ôºö]\s*(0\d{9,10})"
    m = re.search(sdt_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["so_dien_thoai"] = m.group(1).strip()

    # === 2. PH∆Ø∆†NG √ÅN S·ª¨ D·ª§NG V·ªêN ===
    muc_dich_pattern1 = r"muc_dich_vay\s*[:Ôºö]\s*([^\n]+)"
    m = re.search(muc_dich_pattern1, full_text, flags=re.IGNORECASE)
    if m:
        data["muc_dich_vay"] = m.group(1).strip()
    else:
        muc_dich_pattern2 = r"V·ªën\s*vay\s*Agribank.*?[:Ôºö].*?(?:Th·ª±c\s*hi·ªán|S·ª≠\s*d·ª•ng\s*v√†o)\s*([^\n]+)"
        m = re.search(muc_dich_pattern2, full_text, flags=re.IGNORECASE | re.DOTALL)
        if m:
            data["muc_dich_vay"] = m.group(1).strip()[:200]

    tnc_pattern = r"(?:T·ªïng\s*nhu\s*c·∫ßu\s*v·ªën|1\.\s*T·ªïng\s*nhu\s*c·∫ßu\s*v·ªën)\s*[:Ôºö]\s*([\d\.,]+)"
    m = re.search(tnc_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["tong_nhu_cau_von"] = vnd_to_float(m.group(1))

    von_du_pattern = r"V·ªën\s*ƒë·ªëi\s*·ª©ng\s*(?:tham\s*gia)?[^\d]*([\d\.,]+)\s*ƒë·ªìng"
    m = re.search(von_du_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["von_doi_ung"] = vnd_to_float(m.group(1))

    so_tien_vay_pattern = r"V·ªën\s*vay\s*Agribank\s*(?:s·ªë\s*ti·ªÅn)?[:\s]*([\d\.,]+)\s*ƒë·ªìng"
    m = re.search(so_tien_vay_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["so_tien_vay"] = vnd_to_float(m.group(1))

    thoi_han_pattern = r"Th·ªùi\s*h·∫°n\s*vay\s*[:Ôºö]\s*(\d+)\s*th√°ng"
    m = re.search(thoi_han_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["thoi_gian_vay_thang"] = int(m.group(1))

    lai_suat_pattern = r"L√£i\s*su·∫•t\s*[:Ôºö]\s*([\d\.,]+)\s*%"
    m = re.search(lai_suat_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["lai_suat_nam"] = percent_to_float(m.group(1))

    # === 3. NGU·ªíN TR·∫¢ N·ª¢ & THU NH·∫¨P ===
    thu_nhap_du_an_pattern = r"T·ª´\s*ngu·ªìn\s*thu\s*c·ªßa\s*d·ª±\s*√°n[^\d]*([\d\.,]+)\s*ƒë·ªìng\s*/\s*th√°ng"
    m = re.search(thu_nhap_du_an_pattern, full_text, flags=re.IGNORECASE)
    thu_nhap_du_an = 0.0
    if m:
        thu_nhap_du_an = vnd_to_float(m.group(1))

    thu_nhap_luong_pattern = r"Thu\s*nh·∫≠p\s*t·ª´\s*l∆∞∆°ng\s*[:Ôºö]\s*([\d\.,]+)\s*ƒë·ªìng\s*/\s*th√°ng"
    m = re.search(thu_nhap_luong_pattern, full_text, flags=re.IGNORECASE)
    thu_nhap_luong = 0.0
    if m:
        thu_nhap_luong = vnd_to_float(m.group(1))

    tong_thu_nhap_pattern = r"T·ªïng\s*thu\s*nh·∫≠p\s*(?:·ªïn\s*ƒë·ªãnh)?\s*(?:h√†ng\s*)?th√°ng\s*[:Ôºö]\s*([\d\.,]+)\s*ƒë·ªìng"
    m = re.search(tong_thu_nhap_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["thu_nhap_thang"] = vnd_to_float(m.group(1))
    else:
        data["thu_nhap_thang"] = thu_nhap_luong + thu_nhap_du_an

    # === 4. T√ÄI S·∫¢N B·∫¢O ƒê·∫¢M ===
    tsdb_pattern1 = r"T√†i\s*s·∫£n\s*1[^\n]*Gi√°\s*tr·ªã\s*[:Ôºö]\s*([\d\.,]+)\s*ƒë·ªìng"
    m = re.search(tsdb_pattern1, full_text, flags=re.IGNORECASE | re.DOTALL)
    if m:
        data["gia_tri_tsdb"] = vnd_to_float(m.group(1))
    else:
        tsdb_pattern2 = r"Gi√°\s*tr·ªã\s*nh√†\s*d·ª±\s*ki·∫øn\s*mua\s*[:Ôºö]\s*([\d\.,]+)\s*ƒë·ªìng"
        m = re.search(tsdb_pattern2, full_text, flags=re.IGNORECASE)
        if m:
            data["gia_tri_tsdb"] = vnd_to_float(m.group(1))

    # === 5. TH√îNG TIN B·ªî SUNG ===
    loi_nhuan_pattern = r"L·ª£i\s*nhu·∫≠n\s*(?:r√≤ng)?\s*(?:nƒÉm)?[^\d]*([\d\.,]+)\s*ƒë·ªìng"
    m = re.search(loi_nhuan_pattern, full_text, flags=re.IGNORECASE)
    if m:
        data["loi_nhuan_rong_nam"] = vnd_to_float(m.group(1))
    elif thu_nhap_du_an > 0:
        data["loi_nhuan_rong_nam"] = thu_nhap_du_an * 12

    if data["tong_nhu_cau_von"] == 0 and (data["von_doi_ung"] + data["so_tien_vay"] > 0):
        data["tong_nhu_cau_von"] = data["von_doi_ung"] + data["so_tien_vay"]
    
    # Gi·∫£ ƒë·ªãnh t·ªïng v·ªën ƒë·∫ßu t∆∞ l√† t·ªïng nhu c·∫ßu v·ªën n·∫øu th√¥ng tin thi·∫øu
    if data["tong_von_dau_tu"] == 0:
        data["tong_von_dau_tu"] = data["tong_nhu_cau_von"]
    
    # Gi·∫£ ƒë·ªãnh gi√° tr·ªã TSƒêB b·∫±ng t·ªïng nhu c·∫ßu v·ªën (n·∫øu l√† mua/x√¢y d·ª±ng t√†i s·∫£n)
    if data["gia_tri_tsdb"] == 0 and data["tong_nhu_cau_von"] > 0:
        data["gia_tri_tsdb"] = data["tong_nhu_cau_von"]

    return data


def annuity_payment(principal: float, annual_rate_pct: float, months: int) -> float:
    r = annual_rate_pct / 100.0 / 12.0
    if months <= 0:
        return 0.0
    if r == 0:
        return principal / months
    pmt = principal * r * (1 + r) ** months / ((1 + r) ** months - 1)
    return pmt


def build_amortization(principal: float, annual_rate_pct: float, months: int, start_date: Optional[dt.date]=None) -> pd.DataFrame:
    if start_date is None:
        start_date = dt.date.today()
    r = annual_rate_pct / 100.0 / 12.0
    pmt = annuity_payment(principal, annual_rate_pct, months)

    schedule = []
    balance = principal
    for i in range(1, months + 1):
        interest = balance * r
        principal_pay = pmt - interest
        balance = max(0.0, balance - principal_pay)
        pay_date = start_date + dt.timedelta(days=30 * i)
        schedule.append({
            "K·ª≥": i,
            "Ng√†y thanh to√°n": pay_date.strftime("%d/%m/%Y"),
            "Ti·ªÅn l√£i": round(interest, 0),
            "Ti·ªÅn g·ªëc": round(principal_pay, 0),
            "T·ªïng ph·∫£i tr·∫£": round(pmt, 0),
            "D∆∞ n·ª£ c√≤n l·∫°i": round(balance, 0),
        })
    df = pd.DataFrame(schedule)
    return df

def style_schedule_table(df: pd.DataFrame) -> pd.DataFrame:
    """T√¥ m√†u b·∫£ng k·∫ø ho·∫°ch tr·∫£ n·ª£"""
    def color_row(row):
        if row['K·ª≥'] % 2 == 0:
            return ['background-color: #f0f8ff'] * len(row)
        else:
            return ['background-color: #ffffff'] * len(row)
    
    styled = df.style.apply(color_row, axis=1)
    # C·∫≠p nh·∫≠t ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn s·ª≠ d·ª•ng format_currency_intl
    styled = styled.format({
        'Ti·ªÅn l√£i': lambda x: format_currency_intl(x),
        'Ti·ªÅn g·ªëc': lambda x: format_currency_intl(x),
        'T·ªïng ph·∫£i tr·∫£': lambda x: format_currency_intl(x),
        'D∆∞ n·ª£ c√≤n l·∫°i': lambda x: format_currency_intl(x)
    })
    styled = styled.set_properties(**{
        'text-align': 'right',
        'font-size': '14px'
    }, subset=['Ti·ªÅn l√£i', 'Ti·ªÅn g·ªëc', 'T·ªïng ph·∫£i tr·∫£', 'D∆∞ n·ª£ c√≤n l·∫°i'])
    styled = styled.set_properties(**{
        'text-align': 'center'
    }, subset=['K·ª≥', 'Ng√†y thanh to√°n'])
    
    return styled


def compute_metrics(d: Dict[str, Any]) -> Dict[str, Any]:
    res = {}
    pmt = annuity_payment(d.get("so_tien_vay", 0.0), d.get("lai_suat_nam", 0.0), d.get("thoi_gian_vay_thang", 0))
    thu_nhap_thang = max(1e-9, d.get("thu_nhap_thang", 0.0))
    res["PMT_thang"] = pmt
    res["DSR"] = pmt / thu_nhap_thang if thu_nhap_thang > 0 else np.nan
    tong_nhu_cau = d.get("tong_nhu_cau_von", 0.0)
    von_doi_ung = d.get("von_doi_ung", 0.0)
    so_tien_vay = d.get("so_tien_vay", 0.0)
    gia_tri_tsdb = d.get("gia_tri_tsdb", 0.0)
    tong_no_hien_tai = d.get("tong_no_hien_tai", 0.0)
    loi_nhuan_rong_nam = d.get("loi_nhuan_rong_nam", 0.0)
    tong_von_dau_tu = d.get("tong_von_dau_tu", 0.0)

    res["E_over_C"] = (von_doi_ung / tong_nhu_cau) if tong_nhu_cau > 0 else np.nan
    res["LTV"] = (so_tien_vay / gia_tri_tsdb) if gia_tri_tsdb > 0 else np.nan
    thu_nhap_nam = thu_nhap_thang * 12.0
    res["Debt_over_Income"] = (tong_no_hien_tai + so_tien_vay) / max(1e-9, thu_nhap_nam)
    res["ROI"] = (loi_nhuan_rong_nam / max(1e-9, tong_von_dau_tu)) if tong_von_dau_tu > 0 else np.nan
    res["CFR"] = ((thu_nhap_thang - pmt) / thu_nhap_thang) if thu_nhap_thang > 0 else np.nan
    res["Coverage"] = (gia_tri_tsdb / max(1e-9, so_tien_vay)) if so_tien_vay > 0 else np.nan
    res["Phuong_an_hop_ly"] = math.isclose(tong_nhu_cau, von_doi_ung + so_tien_vay, rel_tol=0.02, abs_tol=1_000_000)

    score = 0.0
    if not np.isnan(res["DSR"]):
        score += max(0.0, 1.0 - min(1.0, res["DSR"])) * 0.25
    if not np.isnan(res["LTV"]):
        score += max(0.0, 1.0 - min(1.0, res["LTV"])) * 0.25
    if not np.isnan(res["E_over_C"]):
        score += min(1.0, res["E_over_C"] / 0.3) * 0.2
    if not np.isnan(res["CFR"]):
        score += max(0.0, min(1.0, (res["CFR"]))) * 0.2
    if not np.isnan(res["Coverage"]):
        score += min(1.0, (res["Coverage"] / 1.5)) * 0.1
    res["Score_AI_demo"] = round(score, 3)
    return res

# START: Y√äU C·∫¶U 1 - T·∫†O BI·ªÇU ƒê·ªí
def create_metrics_chart(metrics: Dict[str, Any]):
    """T·∫°o bi·ªÉu ƒë·ªì tr·ª±c quan cho c√°c ch·ªâ ti√™u t√†i ch√≠nh ch√≠nh"""
    if go is None:
        st.warning("Th∆∞ vi·ªán Plotly ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
        return

    df_metrics = pd.DataFrame({
        "Ch·ªâ ti√™u": ["DSR", "LTV", "E/C", "Coverage", "CFR"],
        "Gi√° tr·ªã": [
            metrics.get("DSR", np.nan),
            metrics.get("LTV", np.nan),
            metrics.get("E_over_C", np.nan),
            metrics.get("Coverage", np.nan),
            metrics.get("CFR", np.nan),
        ],
        "Ng∆∞·ª°ng tham chi·∫øu": [0.8, 0.8, 0.2, 1.2, 0.0] # DSR, LTV <= 0.8; E/C >= 0.2; Coverage >= 1.2; CFR > 0
    })
    # Ch·ªâ gi·ªØ l·∫°i c√°c ch·ªâ ti√™u c√≥ gi√° tr·ªã (kh√¥ng ph·∫£i NaN)
    df_metrics = df_metrics.dropna(subset=['Gi√° tr·ªã']).reset_index(drop=True)

    if df_metrics.empty:
        st.info("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì ch·ªâ ti√™u t√†i ch√≠nh.")
        return

    # X√°c ƒë·ªãnh m√†u s·∫Øc v√† bi·ªÉu t∆∞·ª£ng
    def get_color(row):
        metric = row['Ch·ªâ ti√™u']
        value = row['Gi√° tr·ªã']
        ref = row['Ng∆∞·ª°ng tham chi·∫øu']
        if metric in ["DSR", "LTV"]: # C√†ng th·∫•p c√†ng t·ªët (d∆∞·ªõi ng∆∞·ª°ng)
            return "green" if value <= ref else "red"
        elif metric in ["E/C", "Coverage", "CFR"]: # C√†ng cao c√†ng t·ªët (tr√™n ng∆∞·ª°ng)
            return "green" if value >= ref else "red"
        return "gray"

    df_metrics['M√†u'] = df_metrics.apply(get_color, axis=1)
    df_metrics['Gi√° tr·ªã (%)'] = df_metrics['Gi√° tr·ªã'] * 100

    # V·∫Ω bi·ªÉu ƒë·ªì Bar
    fig = px.bar(
        df_metrics,
        x="Ch·ªâ ti√™u",
        y="Gi√° tr·ªã (%)",
        color="M√†u",
        color_discrete_map={"green": "#28a745", "red": "#dc3545", "gray": "#6c757d"},
        text=df_metrics['Gi√° tr·ªã (%)'].apply(lambda x: f"{x:,.1f}%"),
        title="Bi·ªÉu ƒë·ªì Ch·ªâ ti√™u T√†i ch√≠nh (CADAP)",
        labels={"Gi√° tr·ªã (%)": "Gi√° tr·ªã (%)", "Ch·ªâ ti√™u": "Ch·ªâ ti√™u"},
    )

    # Th√™m ƒë∆∞·ªùng tham chi·∫øu (Reference Line)
    for index, row in df_metrics.iterrows():
        metric = row['Ch·ªâ ti√™u']
        ref_value = row['Ng∆∞·ª°ng tham chi·∫øu'] * 100
        color = "#ffc107" if ref_value > 0 else "#007bff" # M√†u v√†ng cho gi·ªõi h·∫°n tr√™n, xanh d∆∞∆°ng cho gi·ªõi h·∫°n d∆∞·ªõi/kh√°c

        if metric in ["DSR", "LTV"]:
             # Th√™m ƒë∆∞·ªùng gi·ªõi h·∫°n tr√™n (Maximum)
            fig.add_shape(
                type="line",
                x0=index - 0.4, x1=index + 0.4, y0=ref_value, y1=ref_value,
                line=dict(color=color, width=2, dash="dash"),
                xref="x", yref="y",
                name=f"Ng∆∞·ª°ng {metric}"
            )
            fig.add_annotation(
                x=index, y=ref_value + 3,
                text=f"Max {ref_value:g}%", showarrow=False,
                font=dict(color=color, size=10),
            )
        elif metric in ["E/C", "Coverage"]:
            # Th√™m ƒë∆∞·ªùng gi·ªõi h·∫°n d∆∞·ªõi (Minimum)
            fig.add_shape(
                type="line",
                x0=index - 0.4, x1=index + 0.4, y0=ref_value, y1=ref_value,
                line=dict(color=color, width=2, dash="dash"),
                xref="x", yref="y",
                name=f"Ng∆∞·ª°ng {metric}"
            )
            fig.add_annotation(
                x=index, y=ref_value - 3,
                text=f"Min {ref_value:g}%", showarrow=False,
                font=dict(color=color, size=10),
            )

    fig.update_layout(
        showlegend=False,
        yaxis_title="Gi√° tr·ªã (%)",
        xaxis_title="Ch·ªâ ti√™u",
        hovermode="x unified"
    )

    st.plotly_chart(fig, use_container_width=True)

# END: Y√äU C·∫¶U 1 - T·∫†O BI·ªÇU ƒê·ªí


def gemini_analyze(d: Dict[str, Any], metrics: Dict[str, Any], model_name: str, api_key: str) -> str:
    if genai is None:
        return "Th∆∞ vi·ªán google-generativeai ch∆∞a ƒë∆∞·ª£c c√†i. Vui l√≤ng th√™m 'google-generativeai' v√†o requirements.txt."
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)
        
        # C·∫≠p nh·∫≠t ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn trong prompt
        d_formatted = {k: format_currency_intl(v) if isinstance(v, (int, float)) and k != 'lai_suat_nam' else v for k, v in d.items()}
        metrics_formatted = {k: f"{v*100:,.1f}%" if k not in ["PMT_thang", "Debt_over_Income", "Score_AI_demo"] and not np.isnan(v) else format_currency_intl(v) if k == "PMT_thang" else f"{v:,.2f}" for k, v in metrics.items()}
        
        prompt = f"""
B·∫°n l√† chuy√™n vi√™n t√≠n d·ª•ng. Ph√¢n t√≠ch h·ªì s∆° vay sau (JSON) v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t "Cho vay" / "Cho vay c√≥ ƒëi·ªÅu ki·ªán" / "Kh√¥ng cho vay" k√®m gi·∫£i th√≠ch ng·∫Øn g·ªçn (<=200 t·ª´).
JSON ƒë·∫ßu v√†o:
Kh√°ch h√†ng & ph∆∞∆°ng √°n: {json.dumps(d_formatted, ensure_ascii=False)}
Ch·ªâ ti√™u t√≠nh to√°n: {json.dumps(metrics_formatted, ensure_ascii=False)}
Ng∆∞·ª°ng tham chi·∫øu:
- DSR ‚â§ 0.8; LTV ‚â§ 0.8; E/C ‚â• 0.2; CFR > 0; Coverage > 1.2.
- N·∫øu th√¥ng tin thi·∫øu, h√£y n√™u gi·∫£ ƒë·ªãnh r√µ r√†ng.
"""
        resp = model.generate_content(prompt)
        return resp.text or "(Kh√¥ng c√≥ n·ªôi dung t·ª´ Gemini)"
    except Exception as e:
        return f"L·ªói khi g·ªçi Gemini: {e}"


def make_zip_for_download() -> bytes:
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as z:
        # Gi·∫£ ƒë·ªãnh c√°c file n√†y t·ªìn t·∫°i
        for fname in ["python.py", "requirements.txt", "README.md"]:
            if os.path.exists(fname):
                z.write(fname, arcname=fname)
    buf.seek(0)
    return buf.read()


# ========================== UI ==========================
st.title("üíº Th·∫©m ƒë·ªãnh ph∆∞∆°ng √°n s·ª≠ d·ª•ng v·ªën (PASDV)")
st.caption("Upload .docx ‚Üí Tr√≠ch xu·∫•t ‚Üí Ch·ªânh s·ª≠a ‚Üí T√≠nh ch·ªâ ti√™u ‚Üí K·∫ø ho·∫°ch tr·∫£ n·ª£ ‚Üí Ph√¢n t√≠ch AI ‚Üí Xu·∫•t Excel/ZIP")

with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh & Gemini")
    model_name = st.selectbox("Model Gemini", ["gemini-2.0-flash-exp", "gemini-1.5-pro", "gemini-1.5-flash"], index=0)
    api_key = st.text_input("API Key Gemini", type="password", help="Ho·∫∑c set GENAI_API_KEY trong secrets.")
    if not api_key:
        api_key = st.secrets.get("GENAI_API_KEY", "") if hasattr(st, "secrets") else ""

    st.markdown("---")
    st.write("üì¶ Xu·∫•t ZIP m√£ ngu·ªìn ƒë·ªÉ ƒë∆∞a l√™n GitHub/Streamlit Cloud ·ªü cu·ªëi trang.")


uploaded = st.file_uploader("T·∫£i l√™n h·ªì s∆° ph∆∞∆°ng √°n pasdv.docx", type=["docx"], help="Ch·ªâ c·∫ßn m·ªôt file .docx")
data = FIELD_DEFAULTS.copy()

if uploaded is not None:
    try:
        data.update(extract_from_docx(uploaded.read()))
        st.success("‚úÖ ƒê√£ tr√≠ch xu·∫•t s∆° b·ªô t·ª´ file.")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file DOCX: {e}")

# Form ch·ªânh s·ª≠a th·ªß c√¥ng
st.markdown("""
<style>
.info-box {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.info-box h3 {
    color: white;
    margin: 0;
}
</style>
<div class="info-box">
    <h3>üìã 1) Th√¥ng tin kh√°ch h√†ng & kho·∫£n vay</h3>
</div>
""", unsafe_allow_html=True)

# S·ª≠a ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã cho c√°c number_input th√†nh ƒë·ªãnh d·∫°ng s·ªë qu·ªëc t·∫ø
col1, col2, col3 = st.columns(3)
with col1:
    data["ten_khach_hang"] = st.text_input("H·ªç t√™n KH", value=data["ten_khach_hang"])
    data["cccd"] = st.text_input("CCCD/CMND", value=data["cccd"])
    data["noi_cu_tru"] = st.text_input("N∆°i c∆∞ tr√∫", value=data["noi_cu_tru"])
    data["so_dien_thoai"] = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=data["so_dien_thoai"])
with col2:
    data["muc_dich_vay"] = st.text_input("M·ª•c ƒë√≠ch vay", value=data["muc_dich_vay"])
    data["tong_nhu_cau_von"] = st.number_input("T·ªïng nhu c·∫ßu v·ªën (VND)", value=float(data["tong_nhu_cau_von"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
    data["von_doi_ung"] = st.number_input("V·ªën ƒë·ªëi ·ª©ng (VND)", value=float(data["von_doi_ung"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
    data["so_tien_vay"] = st.number_input("S·ªë ti·ªÅn vay (VND)", value=float(data["so_tien_vay"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
with col3:
    data["lai_suat_nam"] = st.number_input("L√£i su·∫•t (%/nƒÉm)", value=float(data["lai_suat_nam"]), min_value=0.0, max_value=100.0, step=0.1, format="%.2f")
    data["thoi_gian_vay_thang"] = st.number_input("Th·ªùi gian vay (th√°ng)", value=int(data["thoi_gian_vay_thang"]), min_value=1, max_value=480, step=1)
    data["thu_nhap_thang"] = st.number_input("Thu nh·∫≠p th√°ng (VND)", value=float(data["thu_nhap_thang"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
    data["gia_tri_tsdb"] = st.number_input("Gi√° tr·ªã TSƒêB (VND)", value=float(data["gia_tri_tsdb"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format

col4, col5 = st.columns(2)
with col4:
    data["tong_no_hien_tai"] = st.number_input("T·ªïng n·ª£ hi·ªán t·∫°i (VND)", value=float(data["tong_no_hien_tai"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
with col5:
    data["tong_von_dau_tu"] = st.number_input("T·ªïng v·ªën ƒë·∫ßu t∆∞ (VND)", value=float(data["tong_von_dau_tu"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format
    data["loi_nhuan_rong_nam"] = st.number_input("L·ª£i nhu·∫≠n r√≤ng nƒÉm (VND)", value=float(data["loi_nhuan_rong_nam"]), min_value=0.0, step=1_000_000.0, format="%f") # S·ª≠a format

# Metrics
st.markdown("---")
st.subheader("2) Ch·ªâ ti√™u t√†i ch√≠nh (CADAP)")
metrics = compute_metrics(data)

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
if go is not None:
    create_metrics_chart(metrics)
else:
    st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì. Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán Plotly.")

mcol1, mcol2, mcol3, mcol4 = st.columns(4)
with mcol1:
    # S·ª≠a ƒë·ªãnh d·∫°ng metric PMT
    st.metric("PMT (VND/th√°ng)", f"{format_currency_intl(metrics['PMT_thang'])}") 
    st.metric("DSR (‚â§80%)", f"{metrics['DSR']*100:,.1f}%" if not np.isnan(metrics["DSR"]) else "n/a")
with mcol2:
    st.metric("LTV (‚â§80%)", f"{metrics['LTV']*100:,.1f}%" if not np.isnan(metrics["LTV"]) else "n/a")
    st.metric("E/C (‚â•20%)", f"{metrics['E_over_C']*100:,.1f}%" if not np.isnan(metrics["E_over_C"]) else "n/a")
with mcol3:
    st.metric("Debt/Income (<4)", f"{metrics['Debt_over_Income']:,.2f}" if not np.isnan(metrics["Debt_over_Income"]) else "n/a")
    st.metric("CFR (>0)", f"{metrics['CFR']*100:,.1f}%" if not np.isnan(metrics["CFR"]) else "n/a")
with mcol4:
    st.metric("Coverage (>120%)", f"{metrics['Coverage']*100:,.1f}%" if not np.isnan(metrics["Coverage"]) else "n/a")
    st.metric("Score demo", f"{metrics['Score_AI_demo']:,.3f}")

ok_flag = "‚úÖ" if metrics["Phuong_an_hop_ly"] else "‚ö†Ô∏è"
st.info(f"{ok_flag} T·ªïng nhu c·∫ßu v·ªën {'=' if metrics['Phuong_an_hop_ly'] else '‚â†'} v·ªën ƒë·ªëi ·ª©ng + s·ªë ti·ªÅn vay")

# Schedule
st.markdown("---")
st.markdown("""
<div class="info-box">
    <h3>üí∞ 3) K·∫ø ho·∫°ch tr·∫£ n·ª£</h3>
</div>
""", unsafe_allow_html=True)

schedule_df = build_amortization(
    principal=data["so_tien_vay"],
    annual_rate_pct=data["lai_suat_nam"],
    months=int(data["thoi_gian_vay_thang"]),
    start_date=dt.date.today()
)

# Hi·ªÉn th·ªã b·∫£ng v·ªõi m√†u s·∫Øc
styled_table = style_schedule_table(schedule_df)
st.dataframe(styled_table, use_container_width=True, height=400)

out = io.BytesIO()
with pd.ExcelWriter(out, engine="openpyxl") as writer:
    # ƒê·ªãnh d·∫°ng c√°c c·ªôt ti·ªÅn t·ªá trong Excel tr∆∞·ªõc khi l∆∞u (s·ª≠ d·ª•ng format qu·ªëc t·∫ø)
    df_data = pd.DataFrame([data])
    for col in ['tong_nhu_cau_von', 'von_doi_ung', 'so_tien_vay', 'thu_nhap_thang', 
                'gia_tri_tsdb', 'tong_no_hien_tai', 'loi_nhuan_rong_nam', 'tong_von_dau_tu']:
        if col in df_data.columns:
            df_data[col] = df_data[col].apply(lambda x: format_currency_intl(x) if x is not None else None)

    df_metrics = pd.DataFrame([metrics])
    for col in ['PMT_thang']:
        if col in df_metrics.columns:
            df_metrics[col] = df_metrics[col].apply(lambda x: format_currency_intl(x) if x is not None else None)
    
    # ƒê·ªãnh d·∫°ng c√°c ch·ªâ s·ªë t·ª∑ l·ªá
    for col in ['DSR', 'LTV', 'E_over_C', 'CFR', 'Coverage', 'ROI']:
         if col in df_metrics.columns:
            df_metrics[col] = df_metrics[col].apply(lambda x: f"{x*100:,.2f}%" if not np.isnan(x) else 'n/a')


    df_data.to_excel(writer, sheet_name="Thong_tin", index=False)
    df_metrics.to_excel(writer, sheet_name="Chi_tieu", index=False)
    # B·∫£ng k·∫ø ho·∫°ch tr·∫£ n·ª£ ƒë√£ ƒë∆∞·ª£c l√†m tr√≤n v√† s·ª≠ d·ª•ng s·ªë float trong df, s·∫Ω s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Excel m·∫∑c ƒë·ªãnh
    schedule_df.to_excel(writer, sheet_name="Ke_hoach", index=False)
out.seek(0)
st.download_button("‚¨áÔ∏è T·∫£i Excel", data=out, file_name="ke_hoach_tra_no.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# Gemini
st.subheader("4) Ph√¢n t√≠ch AI (Gemini)")
if api_key and genai is not None:
    with st.spinner("ƒêang ph√¢n t√≠ch..."):
        analysis = gemini_analyze(data, metrics, model_name=model_name, api_key=api_key)
    st.markdown("**K·∫øt lu·∫≠n:**")
    st.write(analysis)
else:
    st.warning("Ch∆∞a c√≥ API key Gemini. ƒêi·ªÅn API key ·ªü Sidebar ƒë·ªÉ d√πng t√≠nh nƒÉng n√†y.")

# Gemini Chatbox
st.subheader("5) üí¨ Tr√≤ chuy·ªán v·ªõi AI v·ªÅ h·ªì s∆°")

# Kh·ªüi t·∫°o chat history trong session state
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.chat_messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Chat input
if prompt := st.chat_input("H·ªèi AI v·ªÅ h·ªì s∆° n√†y... (VD: ƒê√°nh gi√° kh·∫£ nƒÉng tr·∫£ n·ª£? R·ªßi ro n√†o c·∫ßn l∆∞u √Ω?)"):
    # Th√™m c√¢u h·ªèi c·ªßa user v√†o l·ªãch s·ª≠
    st.session_state.chat_messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # G·ªçi Gemini ƒë·ªÉ tr·∫£ l·ªùi
    with st.chat_message("assistant"):
        if not api_key:
            response = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p API Key Gemini ·ªü Sidebar ƒë·ªÉ s·ª≠ d·ª•ng chatbox."
            st.warning(response)
        elif genai is None:
            response = "‚ö†Ô∏è Th∆∞ vi·ªán google-generativeai ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
            st.error(response)
        else:
            try:
                with st.spinner("ü§î AI ƒëang suy nghƒ©..."):
                    genai.configure(api_key=api_key)
                    model = genai.GenerativeModel(model_name)
                    
                    # T·∫°o context t·ª´ d·ªØ li·ªáu h·ªì s∆° (s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng qu·ªëc t·∫ø)
                    context = f"""
B·∫°n l√† chuy√™n vi√™n t√≠n d·ª•ng chuy√™n nghi·ªáp. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin h·ªì s∆° vay:

**Th√¥ng tin kh√°ch h√†ng:**
- H·ªç t√™n: {data['ten_khach_hang']}
- CCCD: {data['cccd']}
- ƒê·ªãa ch·ªâ: {data['noi_cu_tru']}
- SƒêT: {data['so_dien_thoai']}

**Ph∆∞∆°ng √°n vay:**
- M·ª•c ƒë√≠ch: {data['muc_dich_vay']}
- T·ªïng nhu c·∫ßu v·ªën: {format_currency_intl(data['tong_nhu_cau_von'])} VND
- V·ªën ƒë·ªëi ·ª©ng: {format_currency_intl(data['von_doi_ung'])} VND
- S·ªë ti·ªÅn vay: {format_currency_intl(data['so_tien_vay'])} VND
- L√£i su·∫•t: {data['lai_suat_nam']}%/nƒÉm
- Th·ªùi h·∫°n: {data['thoi_gian_vay_thang']} th√°ng
- Thu nh·∫≠p th√°ng: {format_currency_intl(data['thu_nhap_thang'])} VND
- Gi√° tr·ªã TSƒêB: {format_currency_intl(data['gia_tri_tsdb'])} VND

**Ch·ªâ ti√™u t√†i ch√≠nh:**
- PMT (ti·ªÅn tr·∫£ h√†ng th√°ng): {format_currency_intl(metrics['PMT_thang'])} VND
- DSR: {metrics['DSR']*100:.1f}% (chu·∫©n ‚â§80%)
- LTV: {metrics['LTV']*100:.1f}% (chu·∫©n ‚â§80%)
- E/C: {metrics['E_over_C']*100:.1f}% (chu·∫©n ‚â•20%)
- CFR: {metrics['CFR']*100:.1f}% (chu·∫©n >0%)
- Coverage: {metrics['Coverage']*100:.1f}% (chu·∫©n >120%)
- Score t·ªïng h·ª£p: {metrics['Score_AI_demo']:.3f}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau d·ª±a tr√™n th√¥ng tin tr√™n, s·ª≠ d·ª•ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp nh∆∞ng d·ªÖ hi·ªÉu:
"""
                    
                    full_prompt = context + "\n\nC√¢u h·ªèi: " + prompt
                    resp = model.generate_content(full_prompt)
                    response = resp.text if resp.text else "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI."
                    st.markdown(response)
                    
            except Exception as e:
                response = f"‚ùå L·ªói khi g·ªçi Gemini: {str(e)}"
                st.error(response)
        
        # L∆∞u c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
        st.session_state.chat_messages.append({"role": "assistant", "content": response})

# N√∫t x√≥a l·ªãch s·ª≠ chat
col_clear, col_export = st.columns([1, 3])
with col_clear:
    if st.button("üóëÔ∏è X√≥a chat"):
        st.session_state.chat_messages = []
        st.rerun()

with col_export:
    # Export ZIP (gi·ªØ l·∫°i nh∆∞ng nh·ªè g·ªçn h∆°n)
    try:
        zip_bytes = make_zip_for_download()
        st.download_button(
            label="üì¶ T·∫£i m√£ ngu·ªìn",
            data=zip_bytes,
            file_name="pasdv_app.zip",
            mime="application/zip",
            help="Download source code"
        )
    except:
        pass
