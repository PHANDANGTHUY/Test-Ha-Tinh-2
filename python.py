import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from docx import Document
import re
import numpy_financial as npf
import google.generativeai as genai
from io import BytesIO
from datetime import datetime
# ======================================================================================
# C·∫§U H√åNH TRANG V√Ä KH·ªûI T·∫†O
# ======================================================================================
st.set_page_config(
    page_title="H·ªá th·ªëng Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n Kinh doanh",
    page_icon="üè¶",
    layout="wide",
)
st.title("üè¶ H·ªá th·ªëng Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n Kinh doanh")
st.markdown("---")
# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu gi·ªØa c√°c l·∫ßn re-run
if 'data_extracted' not in st.session_state:
    st.session_state.data_extracted = False
if 'docx_text' not in st.session_state:
    st.session_state.docx_text = ""
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
# ======================================================================================
# C√ÅC H√ÄM H·ªñ TR·ª¢ (HELPERS)
# ======================================================================================
def format_currency(value, decimal_places=0):
    """ƒê·ªãnh d·∫°ng s·ªë th√†nh chu·ªói ti·ªÅn t·ªá v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n."""
    if value is None or not isinstance(value, (int, float)):
        return "0"
    return f"{value:,.{decimal_places}f}".replace(",", ".")
def extract_text_from_docx(docx_file):
    """Tr√≠ch xu·∫•t to√†n b·ªô vƒÉn b·∫£n t·ª´ file .docx."""
    try:
        doc = Document(docx_file)
        full_text = [para.text for para in doc.paragraphs]
        return "\n".join(full_text)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file .docx: {e}")
        return ""
def parse_info_from_text(text):
    """
    Ph√¢n t√≠ch vƒÉn b·∫£n ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ban ƒë·∫ßu (best-effort).
    H√†m n√†y s·ª≠ d·ª•ng regex ƒë∆°n gi·∫£n v√† gi·∫£ ƒë·ªãnh c·∫•u tr√∫c file.
    """
    info = {}
   
    # H√†m t√¨m ki·∫øm an to√†n
    def safe_search(pattern, text, group=1, default=None, is_numeric=False):
        match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
        if match:
            result = match.group(group).strip()
            if is_numeric:
                try:
                    # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë (gi·ªØ l·∫°i d·∫•u ph·∫©y/ch·∫•m)
                    cleaned_result = re.sub(r'[^\d,.]', '', result)
                    # Chu·∫©n h√≥a v·ªÅ ƒë·ªãnh d·∫°ng s·ªë c·ªßa Python
                    cleaned_result = cleaned_result.replace('.', '').replace(',', '.')
                    return float(cleaned_result)
                except (ValueError, IndexError):
                    return default
            return result
        return default
    # Th√¥ng tin kh√°ch h√†ng (kh√¥ng c√≥ trong file, gi·ªØ m·∫∑c ƒë·ªãnh)
    info['ho_ten'] = safe_search(r"H·ªç v√† t√™n:\s*(.*?)\s*\.", text) or "Ch∆∞a r√µ"
    info['cccd'] = safe_search(r"CCCD s·ªë:\s*(\d+)", text) or ""
    info['dia_chi'] = safe_search(r"N∆°i c∆∞ tr√∫:\s*(.*?)(?:,|$|\n)", text) or "Ch∆∞a r√µ"
    info['sdt'] = safe_search(r"S·ªë ƒëi·ªán tho·∫°i:\s*(\d+)", text) or ""
    # Th√¥ng tin ph∆∞∆°ng √°n vay
    info['muc_dich_vay'] = safe_search(r"M·ª•c ƒë√≠ch vay:\s*(.*?)\n", text) or "Kinh doanh v·∫≠t li·ªáu x√¢y d·ª±ng"
    info['tong_nhu_cau_von'] = safe_search(r"- Chi ph√≠ kinh doanh:\s*([\d.,]+)\s*ƒë·ªìng", text, is_numeric=True, default=0)
    info['von_doi_ung'] = safe_search(r"V·ªën ƒë√¥ÃÅi ∆∞ÃÅng.*?ƒë·ªìng,([\d.,]+)", text, is_numeric=True, default=0)  # Kh√¥ng c√≥ trong file, gi·ªØ default
    info['so_tien_vay'] = safe_search(r"Ch√™nh l·ªách thu chi:\s*([\d.,]+)\s*ƒë·ªìng", text, is_numeric=True, default=0)  # S·ª≠ d·ª•ng ch√™nh l·ªách l√†m proxy n·∫øu c·∫ßn
    info['lai_suat'] = safe_search(r"L√£i su·∫•t ƒë·ªÅ ngh·ªã:\s*([\d.,]+)%/nƒÉm", text, is_numeric=True, default=5.0)
    info['thoi_gian_vay'] = safe_search(r"Th·ªùi h·∫°n cho vay:\s*(\d+)\s*th√°ng", text, is_numeric=True, default=3)
    # Th√¥ng tin t√†i s·∫£n ƒë·∫£m b·∫£o (kh√¥ng c√≥ chi ti·∫øt c·ª• th·ªÉ)
    info['tsdb_mo_ta'] = safe_search(r"T√†i s·∫£n b·∫£o ƒë·∫£m:\s*(.*?)(?=III\. Th√¥ng tin)", text) or "Ch∆∞a c√≥ m√¥ t·∫£"
    info['tsdb_gia_tri'] = safe_search(r"T·ªïng t√†i s·∫£n ƒë·∫£m b·∫£o:\s*([\d.,]+)", text, is_numeric=True, default=0)
    # Tr√≠ch xu·∫•t th√™m th√¥ng tin c·ª• th·ªÉ t·ª´ file
    info['doanh_thu'] = safe_search(r"\+Doanh thu c·ªßa ph∆∞∆°ng √°n:\s*([\d.,]+)\s*ƒë·ªìng", text, is_numeric=True, default=0)
    info['chi_phi'] = safe_search(r"\+  Chi ph√≠ kinh doanh:\s*([\d.,]+)\s*ƒë·ªìng", text, is_numeric=True, default=0)
    info['chenh_lech_thu_chi'] = safe_search(r"\+  Ch√™nh l·ªách thu chi:\s*([\d.,]+)\s*ƒë·ªìng", text, is_numeric=True, default=0)
    info['nguon_tra_no'] = safe_search(r"- T·ª´ ngu·ªìn thu c·ªßa ph∆∞∆°ng √°n kinh doanh:\s*([\d.,]+)ƒë·ªìng", text, is_numeric=True, default=0)
    return info
def calculate_repayment_schedule(principal, annual_rate, term_months):
    """T·∫°o b·∫£ng k·∫ø ho·∫°ch tr·∫£ n·ª£ chi ti·∫øt."""
    if not all([principal > 0, annual_rate > 0, term_months > 0]):
        return pd.DataFrame()
    monthly_rate = annual_rate / 12 / 100
   
    # T√≠nh ti·ªÅn g·ªëc ph·∫£i tr·∫£ h√†ng th√°ng
    principal_payment = principal / term_months
   
    schedule = []
    remaining_balance = principal
    for i in range(1, term_months + 1):
        interest_payment = remaining_balance * monthly_rate
        total_payment = principal_payment + interest_payment
       
        schedule.append({
            "K·ª≥ tr·∫£ n·ª£": i,
            "D∆∞ n·ª£ ƒë·∫ßu k·ª≥": remaining_balance,
            "G·ªëc tr·∫£ trong k·ª≥": principal_payment,
            "L√£i tr·∫£ trong k·ª≥": interest_payment,
            "T·ªïng g·ªëc v√† l√£i": total_payment,
            "D∆∞ n·ª£ cu·ªëi k·ª≥": remaining_balance - principal_payment,
        })
        remaining_balance -= principal_payment
    df = pd.DataFrame(schedule)
    # ƒê·∫£m b·∫£o d∆∞ n·ª£ cu·ªëi k·ª≥ cu·ªëi c√πng l√† 0
    df.loc[df.index[-1], 'D∆∞ n·ª£ cu·ªëi k·ª≥'] = 0
    return df
def generate_excel_download(df):
    """T·∫°o file Excel t·ª´ DataFrame ƒë·ªÉ t·∫£i xu·ªëng."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='LichTraNo')
    processed_data = output.getvalue()
    return processed_data
def generate_report_docx(customer_info, loan_info, collateral_info, ratios, ai_analysis_1, ai_analysis_2):
    """T·∫°o file B√°o c√°o Th·∫©m ƒë·ªãnh d∆∞·ªõi d·∫°ng .docx."""
    doc = Document()
    doc.add_heading('B√ÅO C√ÅO TH·∫®M ƒê·ªäNH S∆† B·ªò', level=1)
    doc.add_paragraph(f"Ng√†y l·∫≠p b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    # Th√¥ng tin kh√°ch h√†ng
    doc.add_heading('1. Th√¥ng tin kh√°ch h√†ng', level=2)
    for key, value in customer_info.items():
        doc.add_paragraph(f"{key.replace('_', ' ').title()}: {value}")
   
    # Th√¥ng tin kho·∫£n vay
    doc.add_heading('2. Th√¥ng tin Ph∆∞∆°ng √°n vay & C√°c ch·ªâ s·ªë', level=2)
    for key, value in loan_info.items():
        val_str = format_currency(value) if isinstance(value, (int, float)) and 'l√£i su·∫•t' not in key and 'th·ªùi gian' not in key else value
        unit = " %/nƒÉm" if 'l√£i su·∫•t' in key else " th√°ng" if 'th·ªùi gian' in key else " VNƒê" if isinstance(value, (int, float)) else ""
        doc.add_paragraph(f"{key.replace('_', ' ').title()}: {val_str}{unit}")
    for key, value in ratios.items():
        doc.add_paragraph(f"{key}: {value}")
   
    # T√†i s·∫£n ƒë·∫£m b·∫£o
    doc.add_heading('3. Th√¥ng tin t√†i s·∫£n ƒë·∫£m b·∫£o', level=2)
    doc.add_paragraph(f"M√¥ t·∫£: {collateral_info['tsdb_mo_ta']}")
    doc.add_paragraph(f"T·ªïng gi√° tr·ªã ƒë·ªãnh gi√°: {format_currency(collateral_info['tsdb_gia_tri'])} VNƒê")
    # Ph√¢n t√≠ch t·ª´ AI
    doc.add_heading('4. Ph√¢n t√≠ch t·ª± ƒë·ªông b·ªüi AI', level=2)
    doc.add_heading('4.1. Ph√¢n t√≠ch t·ª´ file .docx c·ªßa kh√°ch h√†ng', level=3)
    doc.add_paragraph(ai_analysis_1 if ai_analysis_1 else "Ch∆∞a c√≥ ph√¢n t√≠ch.")
    doc.add_heading('4.2. Ph√¢n t√≠ch t·ª´ d·ªØ li·ªáu ƒë√£ hi·ªáu ch·ªânh tr√™n ·ª©ng d·ª•ng', level=3)
    doc.add_paragraph(ai_analysis_2 if ai_analysis_2 else "Ch∆∞a c√≥ ph√¢n t√≠ch.")
    # L∆∞u v√†o buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer.getvalue()
# ======================================================================================
# THANH B√äN (SIDEBAR)
# ======================================================================================
with st.sidebar:
    st.header("C·∫•u h√¨nh & Ch·ª©c nƒÉng")
   
    # Nh·∫≠p API Key
    api_key = st.text_input("üîë Gemini API Key", type="password", help="Nh·∫≠p API Key c·ªßa b·∫°n ƒë·ªÉ k√≠ch ho·∫°t c√°c t√≠nh nƒÉng AI.")
   
    st.markdown("---")
   
    # Ch·ª©c nƒÉng xu·∫•t d·ªØ li·ªáu
    st.subheader("Ch·ª©c nƒÉng Xu·∫•t d·ªØ li·ªáu")
    export_option = st.selectbox(
        "Ch·ªçn lo·∫°i b√°o c√°o:",
        ("--- Ch·ªçn ---", "Xu·∫•t K·∫ø ho·∫°ch tr·∫£ n·ª£ (Excel)", "Xu·∫•t B√°o c√°o Th·∫©m ƒë·ªãnh")
    )
    execute_export = st.button("Th·ª±c hi·ªán", use_container_width=True, disabled=(export_option == "--- Ch·ªçn ---"))
# ======================================================================================
# KHU V·ª∞C CH·ª®C NƒÇNG CH√çNH (TABS)
# ======================================================================================
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìù Nh·∫≠p li·ªáu & Tr√≠ch xu·∫•t th√¥ng tin",
    "üìä Ph√¢n t√≠ch Ch·ªâ s·ªë & D√≤ng ti·ªÅn",
    "üìà Bi·ªÉu ƒë·ªì Tr·ª±c quan",
    "ü§ñ Ph√¢n t√≠ch b·ªüi AI",
    "üí¨ Chatbot H·ªó tr·ª£"
])
# --------------------------------------------------------------------------------------
# TAB 1: NH·∫¨P LI·ªÜU & TR√çCH XU·∫§T
# --------------------------------------------------------------------------------------
with tab1:
    st.header("T·∫£i l√™n v√† Hi·ªáu ch·ªânh Th√¥ng tin Ph∆∞∆°ng √°n Kinh doanh")
   
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n file Ph∆∞∆°ng √°n Kinh doanh c·ªßa kh√°ch h√†ng (.docx)",
        type=['docx'],
        accept_multiple_files=False
    )
    if uploaded_file is not None:
        # Ch·ªâ tr√≠ch xu·∫•t l·∫°i n·∫øu file thay ƒë·ªïi ho·∫∑c ch∆∞a tr√≠ch xu·∫•t
        if not st.session_state.data_extracted:
            with st.spinner("ƒêang ƒë·ªçc v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ file..."):
                st.session_state.docx_text = extract_text_from_docx(uploaded_file)
                parsed_data = parse_info_from_text(st.session_state.docx_text)
                # L∆∞u d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t v√†o session_state
                for key, value in parsed_data.items():
                    st.session_state[key] = value
                st.session_state.data_extracted = True
                st.success("Tr√≠ch xu·∫•t th√¥ng tin th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra v√† hi·ªáu ch·ªânh b√™n d∆∞·ªõi.")
   
    # S·ª≠ d·ª•ng expander ƒë·ªÉ nh√≥m c√°c tr∆∞·ªùng th√¥ng tin
    with st.expander("V√πng 1 - Th√¥ng tin kh√°ch h√†ng", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            st.session_state.ho_ten = st.text_input("H·ªç v√† t√™n", value=st.session_state.get('ho_ten', ''))
            st.session_state.cccd = st.text_input("CCCD/CMND", value=st.session_state.get('cccd', ''))
        with col2:
            st.session_state.sdt = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=st.session_state.get('sdt', ''))
            st.session_state.dia_chi = st.text_input("ƒê·ªãa ch·ªâ", value=st.session_state.get('dia_chi', ''))
    with st.expander("V√πng 2 - Th√¥ng tin ph∆∞∆°ng √°n vay", expanded=True):
        st.session_state.muc_dich_vay = st.text_area("M·ª•c ƒë√≠ch vay", value=st.session_state.get('muc_dich_vay', ''))
        col1, col2, col3 = st.columns(3)
        with col1:
            st.session_state.tong_nhu_cau_von = st.number_input(
                "T·ªïng nhu c·∫ßu v·ªën (VNƒê)",
                min_value=0,
                value=int(st.session_state.get('tong_nhu_cau_von', 0)),
                step=1000000,
                format="%d"
            )
            st.session_state.von_doi_ung = st.number_input(
                "V·ªën ƒë·ªëi ·ª©ng (VNƒê)",
                min_value=0,
                value=int(st.session_state.get('von_doi_ung', 0)),
                step=1000000,
                format="%d"
            )
        with col2:
            st.session_state.so_tien_vay = st.number_input(
                "S·ªë ti·ªÅn vay (VNƒê)",
                min_value=0,
                value=int(st.session_state.get('so_tien_vay', 0)),
                step=1000000,
                format="%d"
            )
            st.session_state.lai_suat = st.number_input(
                "L√£i su·∫•t (%/nƒÉm)",
                min_value=0.0,
                value=st.session_state.get('lai_suat', 5.0),
                step=0.1,
                format="%.1f"
            )
        with col3:
             st.session_state.thoi_gian_vay = st.number_input(
                "Th·ªùi gian vay (th√°ng)",
                min_value=1,
                value=int(st.session_state.get('thoi_gian_vay', 12)),
                step=1
            )
           
    with st.expander("V√πng 3 - Th√¥ng tin t√†i s·∫£n ƒë·∫£m b·∫£o", expanded=True):
        st.session_state.tsdb_mo_ta = st.text_area("M√¥ t·∫£ t√†i s·∫£n", value=st.session_state.get('tsdb_mo_ta', ''))
        st.session_state.tsdb_gia_tri = st.number_input(
            "Gi√° tr·ªã ƒë·ªãnh gi√° (VNƒê)",
            min_value=0,
            value=int(st.session_state.get('tsdb_gia_tri', 0)),
            step=1000000,
            format="%d"
        )
# L·∫•y d·ªØ li·ªáu t·ª´ session_state ƒë·ªÉ t√≠nh to√°n
so_tien_vay = st.session_state.get('so_tien_vay', 0)
tong_nhu_cau_von = st.session_state.get('tong_nhu_cau_von', 0)
von_doi_ung = st.session_state.get('von_doi_ung', 0)
tsdb_gia_tri = st.session_state.get('tsdb_gia_tri', 0)
lai_suat = st.session_state.get('lai_suat', 0.0)
thoi_gian_vay = st.session_state.get('thoi_gian_vay', 0)
# --------------------------------------------------------------------------------------
# TAB 2: PH√ÇN T√çCH CH·ªà S·ªê & D√íNG TI·ªÄN
# --------------------------------------------------------------------------------------
with tab2:
    st.header("C√°c ch·ªâ s·ªë t√†i ch√≠nh v√† K·∫ø ho·∫°ch tr·∫£ n·ª£")
    if so_tien_vay > 0:
        st.subheader("C√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng")
        col1, col2, col3 = st.columns(3)
       
        # T√≠nh to√°n ch·ªâ s·ªë
        ty_le_vay_tong_von = (so_tien_vay / tong_nhu_cau_von * 100) if tong_nhu_cau_von > 0 else 0
        ty_le_doi_ung = (von_doi_ung / tong_nhu_cau_von * 100) if tong_nhu_cau_von > 0 else 0
        ty_le_vay_tsdb = (so_tien_vay / tsdb_gia_tri * 100) if tsdb_gia_tri > 0 else 0
        # L∆∞u ch·ªâ s·ªë ƒë·ªÉ xu·∫•t b√°o c√°o
        ratios_for_report = {
            "T·ª∑ l·ªá Vay/T·ªïng nhu c·∫ßu v·ªën": f"{ty_le_vay_tong_von:.2f}%",
            "T·ª∑ l·ªá V·ªën ƒë·ªëi ·ª©ng/T·ªïng nhu c·∫ßu v·ªën": f"{ty_le_doi_ung:.2f}%",
            "T·ª∑ l·ªá Vay/Gi√° tr·ªã TSƒêB": f"{ty_le_vay_tsdb:.2f}%"
        }
        st.session_state.ratios = ratios_for_report
        col1.metric("T·ª∑ l·ªá Vay/T·ªïng nhu c·∫ßu v·ªën", f"{ty_le_vay_tong_von:.2f}%")
        col2.metric("T·ª∑ l·ªá V·ªën ƒë·ªëi ·ª©ng", f"{ty_le_doi_ung:.2f}%")
        col3.metric("T·ª∑ l·ªá Vay/Gi√° tr·ªã TSƒêB", f"{ty_le_vay_tsdb:.2f}%", help="T·ª∑ l·ªá gi·ªØa s·ªë ti·ªÅn vay v√† t·ªïng gi√° tr·ªã t√†i s·∫£n ƒë·∫£m b·∫£o.")
        st.markdown("---")
       
        st.subheader("B·∫£ng k·∫ø ho·∫°ch tr·∫£ n·ª£ chi ti·∫øt")
        repayment_df = calculate_repayment_schedule(so_tien_vay, lai_suat, thoi_gian_vay)
       
        # L∆∞u b·∫£ng ƒë·ªÉ c√≥ th·ªÉ xu·∫•t Excel
        st.session_state.repayment_df = repayment_df
        if not repayment_df.empty:
            # ƒê·ªãnh d·∫°ng l·∫°i c√°c c·ªôt ti·ªÅn t·ªá ƒë·ªÉ hi·ªÉn th·ªã
            df_display = repayment_df.copy()
            currency_cols = ["D∆∞ n·ª£ ƒë·∫ßu k·ª≥", "G·ªëc tr·∫£ trong k·ª≥", "L√£i tr·∫£ trong k·ª≥", "T·ªïng g·ªëc v√† l√£i", "D∆∞ n·ª£ cu·ªëi k·ª≥"]
            for col in currency_cols:
                df_display[col] = df_display[col].apply(format_currency)
           
            st.dataframe(df_display, use_container_width=True, height=min(35 * (len(df_display) + 1), 600))
        else:
            st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kho·∫£n vay (S·ªë ti·ªÅn, L√£i su·∫•t, Th·ªùi gian) ƒë·ªÉ xem k·∫ø ho·∫°ch tr·∫£ n·ª£.")
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng nh·∫≠p th√¥ng tin ·ªü tab 'Nh·∫≠p li·ªáu'.")
# --------------------------------------------------------------------------------------
# TAB 3: BI·ªÇU ƒê·ªí TR·ª∞C QUAN
# --------------------------------------------------------------------------------------
with tab3:
    st.header("Tr·ª±c quan h√≥a d·ªØ li·ªáu t√†i ch√≠nh")
    if so_tien_vay > 0 and von_doi_ung > 0:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("C∆° c·∫•u Ngu·ªìn v·ªën")
            labels = ['V·ªën vay', 'V·ªën ƒë·ªëi ·ª©ng']
            values = [so_tien_vay, von_doi_ung]
            fig_pie = go.Figure(data=[go.Pie(
                labels=labels,
                values=values,
                hole=.3,
                textinfo='percent+label',
                marker_colors=px.colors.sequential.Blues_r
            )])
            fig_pie.update_layout(
                title_text='T·ª∑ tr·ªçng V·ªën vay v√† V·ªën ƒë·ªëi ·ª©ng',
                legend_title_text='Ngu·ªìn v·ªën',
                uniformtext_minsize=12,
                uniformtext_mode='hide'
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        with col2:
            st.subheader("Bi·∫øn ƒë·ªông D∆∞ n·ª£")
            if 'repayment_df' in st.session_state and not st.session_state.repayment_df.empty:
                df_chart = st.session_state.repayment_df
                # Th√™m d√≤ng d∆∞ n·ª£ ban ƒë·∫ßu t·∫°i k·ª≥ 0
                initial_row = pd.DataFrame([{'K·ª≥ tr·∫£ n·ª£': 0, 'D∆∞ n·ª£ cu·ªëi k·ª≥': so_tien_vay}])
                df_chart = pd.concat([initial_row, df_chart[['K·ª≥ tr·∫£ n·ª£', 'D∆∞ n·ª£ cu·ªëi k·ª≥']]], ignore_index=True)
                fig_line = go.Figure()
                fig_line.add_trace(go.Scatter(
                    x=df_chart['K·ª≥ tr·∫£ n·ª£'],
                    y=df_chart['D∆∞ n·ª£ cu·ªëi k·ª≥'],
                    mode='lines+markers',
                    name='D∆∞ n·ª£',
                    fill='tozeroy' # T√¥ m√†u v√πng d∆∞·ªõi ƒë∆∞·ªùng line
                ))
                fig_line.update_layout(
                    title_text='D∆∞ n·ª£ gi·∫£m d·∫ßn qua c√°c k·ª≥',
                    xaxis_title='K·ª≥ tr·∫£ n·ª£ (Th√°ng)',
                    yaxis_title='D∆∞ n·ª£ c√≤n l·∫°i (VNƒê)',
                )
                st.plotly_chart(fig_line, use_container_width=True)
            else:
                 st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch tr·∫£ n·ª£ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì. Vui l√≤ng nh·∫≠p th√¥ng tin ·ªü tab 'Nh·∫≠p li·ªáu'.")
# --------------------------------------------------------------------------------------
# TAB 4: PH√ÇN T√çCH B·ªûI AI
# --------------------------------------------------------------------------------------
with tab4:
    st.header("Ph√¢n t√≠ch Chuy√™n s√¢u v·ªõi Tr√≠ tu·ªá Nh√¢n t·∫°o (Gemini)")
   
    if not api_key:
        st.warning("Vui l√≤ng nh·∫≠p Gemini API Key ·ªü thanh b√™n ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.")
    else:
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel('gemini-2.5-flash') # Ho·∫∑c gemini-pro
        except Exception as e:
            st.error(f"L·ªói kh·ªüi t·∫°o Gemini: {e}")
            model = None
        if st.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch", use_container_width=True, disabled=(not model or not st.session_state.data_extracted)):
           
            # Ph√¢n t√≠ch 1: D·ª±a tr√™n file .docx g·ªëc
            with st.spinner("AI ƒëang ph√¢n t√≠ch n·ªôi dung file .docx..."):
                if st.session_state.docx_text:
                    prompt1 = f"""
                    V·ªõi vai tr√≤ l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh t√≠n d·ª•ng ng√¢n h√†ng, h√£y ph√¢n t√≠ch to√†n b·ªô n·ªôi dung c·ªßa ph∆∞∆°ng √°n kinh doanh d∆∞·ªõi ƒë√¢y.
                    C·∫ßn t·∫≠p trung v√†o c√°c ƒëi·ªÉm sau:
                    1. T√≥m t·∫Øt t·ªïng quan v·ªÅ ph∆∞∆°ng √°n kinh doanh.
                    2. Ph√¢n t√≠ch c√°c ƒëi·ªÉm m·∫°nh c·ªßa ph∆∞∆°ng √°n (v√≠ d·ª•: kinh nghi·ªám, th·ªã tr∆∞·ªùng, s·∫£n ph·∫©m).
                    3. Ph√¢n t√≠ch c√°c ƒëi·ªÉm y·∫øu ho·∫∑c c√°c ƒëi·ªÉm c·∫ßn l√†m r√µ.
                    4. Nh·∫≠n di·ªán c√°c r·ªßi ro ti·ªÅm ·∫©n (th·ªã tr∆∞·ªùng, ho·∫°t ƒë·ªông, t√†i ch√≠nh).
                    5. ƒê∆∞a ra m·ªôt k·∫øt lu·∫≠n s∆° b·ªô v·ªÅ t√≠nh kh·∫£ thi c·ªßa ph∆∞∆°ng √°n.
                    N·ªôi dung ph∆∞∆°ng √°n kinh doanh:
                    ---
                    {st.session_state.docx_text}
                    ---
                    """
                    try:
                        response1 = model.generate_content(prompt1)
                        st.session_state.ai_analysis_1 = response1.text
                    except Exception as e:
                        st.session_state.ai_analysis_1 = f"L·ªói khi g·ªçi API Gemini: {e}"
                else:
                    st.session_state.ai_analysis_1 = "Kh√¥ng c√≥ n·ªôi dung file ƒë·ªÉ ph√¢n t√≠ch."
           
            # Ph√¢n t√≠ch 2: D·ª±a tr√™n d·ªØ li·ªáu ƒë√£ hi·ªáu ch·ªânh
            with st.spinner("AI ƒëang ph√¢n t√≠ch c√°c ch·ªâ s·ªë v√† d·ªØ li·ªáu ƒë√£ hi·ªáu ch·ªânh..."):
                # T·ªïng h·ª£p th√¥ng tin t·ª´ session_state th√†nh m·ªôt chu·ªói
                adjusted_data_summary = f"""
                - Kh√°ch h√†ng: {st.session_state.ho_ten}, CCCD: {st.session_state.cccd}
                - M·ª•c ƒë√≠ch vay: {st.session_state.muc_dich_vay}
                - T·ªïng nhu c·∫ßu v·ªën: {format_currency(st.session_state.tong_nhu_cau_von)} VNƒê
                - V·ªën ƒë·ªëi ·ª©ng: {format_currency(st.session_state.von_doi_ung)} VNƒê
                - S·ªë ti·ªÅn vay: {format_currency(st.session_state.so_tien_vay)} VNƒê
                - L√£i su·∫•t: {st.session_state.lai_suat}%/nƒÉm
                - Th·ªùi gian vay: {st.session_state.thoi_gian_vay} th√°ng
                - T·ªïng gi√° tr·ªã TSƒêB: {format_currency(st.session_state.tsdb_gia_tri)} VNƒê
                - T·ª∑ l·ªá Vay/TSƒêB: {st.session_state.get('ratios', {}).get('T·ª∑ l·ªá Vay/Gi√° tr·ªã TSƒêB', 'N/A')}
                - T·ª∑ l·ªá Vay/T·ªïng v·ªën: {st.session_state.get('ratios', {}).get('T·ª∑ l·ªá Vay/T·ªïng nhu c·∫ßu v·ªën', 'N/A')}
                """
               
                prompt2 = f"""
                V·ªõi vai tr√≤ l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh t√≠n d·ª•ng, h√£y ph√¢n t√≠ch s√¢u v·ªÅ c√°c ch·ªâ s·ªë t√†i ch√≠nh c·ªßa ph∆∞∆°ng √°n vay v·ªën d·ª±a tr√™n c√°c th√¥ng s·ªë ƒë√£ ƒë∆∞·ª£c chuy√™n vi√™n t√≠n d·ª•ng hi·ªáu ch·ªânh d∆∞·ªõi ƒë√¢y.
                H√£y t·∫≠p trung v√†o:
                1. ƒê√°nh gi√° t√≠nh h·ª£p l√Ω c·ªßa s·ªë ti·ªÅn vay so v·ªõi nhu c·∫ßu v·ªën v√† v·ªën ƒë·ªëi ·ª©ng.
                2. Ph√¢n t√≠ch kh·∫£ nƒÉng tr·∫£ n·ª£ d·ª±a tr√™n s·ªë ti·ªÅn vay, l√£i su·∫•t v√† th·ªùi h·∫°n.
                3. ƒê√°nh gi√° m·ª©c ƒë·ªô an to√†n c·ªßa kho·∫£n vay d·ª±a tr√™n t·ª∑ l·ªá cho vay so v·ªõi gi√° tr·ªã t√†i s·∫£n ƒë·∫£m b·∫£o.
                4. ƒê∆∞a ra c√°c khuy·∫øn ngh·ªã (n·∫øu c√≥) ƒë·ªÉ tƒÉng t√≠nh kh·∫£ thi cho ph∆∞∆°ng √°n.
                D·ªØ li·ªáu ƒë√£ hi·ªáu ch·ªânh:
                ---
                {adjusted_data_summary}
                ---
                """
                try:
                    response2 = model.generate_content(prompt2)
                    st.session_state.ai_analysis_2 = response2.text
                except Exception as e:
                     st.session_state.ai_analysis_2 = f"L·ªói khi g·ªçi API Gemini: {e}"
        if 'ai_analysis_1' in st.session_state:
            with st.expander("1. Ph√¢n t√≠ch t·ª´ file .docx c·ªßa kh√°ch h√†ng", expanded=True):
                st.info("Ngu·ªìn d·ªØ li·ªáu: Ph√¢n t√≠ch t·ª´ file .docx c·ªßa kh√°ch h√†ng.")
                st.markdown(st.session_state.ai_analysis_1)
        if 'ai_analysis_2' in st.session_state:
            with st.expander("2. Ph√¢n t√≠ch t·ª´ c√°c th√¥ng s·ªë v√† ch·ªâ s·ªë ƒë√£ t√≠nh to√°n", expanded=True):
                st.info("Ngu·ªìn d·ªØ li·ªáu: Ph√¢n t√≠ch t·ª´ c√°c th√¥ng s·ªë v√† ch·ªâ s·ªë ƒë√£ t√≠nh to√°n tr√™n ·ª©ng d·ª•ng.")
                st.markdown(st.session_state.ai_analysis_2)
# --------------------------------------------------------------------------------------
# TAB 5: CHATBOT H·ªñ TR·ª¢
# --------------------------------------------------------------------------------------
with tab5:
    st.header("Chatbot H·ªó tr·ª£ Th·∫©m ƒë·ªãnh")
    if not api_key:
        st.warning("Vui l√≤ng nh·∫≠p Gemini API Key ·ªü thanh b√™n ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.")
    else:
        try:
            # Kh·ªüi t·∫°o model cho chatbot
            model_chat = genai.GenerativeModel('gemini-2.5-flash')
            chat = model_chat.start_chat(history=[])
        except Exception as e:
            st.error(f"L·ªói kh·ªüi t·∫°o Gemini Chat: {e}")
            chat = None
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        for message in st.session_state.chat_history:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        # Input t·ª´ ng∆∞·ªùi d√πng
        if prompt := st.chat_input("ƒê·∫∑t c√¢u h·ªèi v·ªÅ th·∫©m ƒë·ªãnh, t√†i ch√≠nh..."):
            if chat:
                # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
                st.session_state.chat_history.append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)
                # G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini v√† nh·∫≠n ph·∫£n h·ªìi
                with st.chat_message("assistant"):
                    with st.spinner("Bot ƒëang suy nghƒ©..."):
                        try:
                            # B·ªï sung context t·ª´ file v√†o prompt
                            context_prompt = f"""
                            D·ª±a tr√™n b·ªëi c·∫£nh c·ªßa ph∆∞∆°ng √°n kinh doanh n√†y (n·∫øu c√≥):
                            ---
                            {st.session_state.docx_text[:2000]}...
                            ---
                            V√† d·ªØ li·ªáu t·ªïng h·ª£p:
                            ---
                            - Kh√°ch h√†ng: {st.session_state.get('ho_ten', 'N/A')}
                            - S·ªë ti·ªÅn vay: {format_currency(st.session_state.get('so_tien_vay', 0))} VNƒê
                            - M·ª•c ƒë√≠ch: {st.session_state.get('muc_dich_vay', 'N/A')}
                            ---
                            H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau: "{prompt}"
                            """
                            response = chat.send_message(context_prompt)
                            response_text = response.text
                            st.markdown(response_text)
                            # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠
                            st.session_state.chat_history.append({"role": "assistant", "content": response_text})
                        except Exception as e:
                            error_message = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {e}"
                            st.error(error_message)
                            st.session_state.chat_history.append({"role": "assistant", "content": error_message})
            else:
                st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot. Vui l√≤ng ki·ªÉm tra API Key.")
        if st.session_state.chat_history:
            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"):
                st.session_state.chat_history = []
                st.rerun()
# ======================================================================================
# LOGIC X·ª¨ L√ù N√öT EXPORT (ƒë·∫∑t ·ªü cu·ªëi ƒë·ªÉ truy c·∫≠p ƒë∆∞·ª£c m·ªçi state)
# ======================================================================================
if execute_export:
    if export_option == "Xu·∫•t K·∫ø ho·∫°ch tr·∫£ n·ª£ (Excel)":
        if 'repayment_df' in st.session_state and not st.session_state.repayment_df.empty:
            excel_data = generate_excel_download(st.session_state.repayment_df)
            st.sidebar.download_button(
                label="üì• T·∫£i xu·ªëng file Excel",
                data=excel_data,
                file_name=f"KeHoachTraNo_{st.session_state.get('ho_ten', 'KH')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
            st.sidebar.success("ƒê√£ t·∫°o file Excel!")
        else:
            st.sidebar.error("Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch tr·∫£ n·ª£ ƒë·ªÉ xu·∫•t.")
    elif export_option == "Xu·∫•t B√°o c√°o Th·∫©m ƒë·ªãnh":
        if st.session_state.data_extracted:
            with st.spinner("ƒêang t·∫°o b√°o c√°o..."):
                customer_info = {k: st.session_state.get(k) for k in ['ho_ten', 'cccd', 'sdt', 'dia_chi']}
                loan_info = {k: st.session_state.get(k) for k in ['muc_dich_vay', 'tong_nhu_cau_von', 'von_doi_ung', 'so_tien_vay', 'lai_suat', 'thoi_gian_vay']}
                collateral_info = {k: st.session_state.get(k) for k in ['tsdb_mo_ta', 'tsdb_gia_tri']}
               
                report_data = generate_report_docx(
                    customer_info,
                    loan_info,
                    collateral_info,
                    st.session_state.get('ratios', {}),
                    st.session_state.get('ai_analysis_1', 'Ch∆∞a th·ª±c hi·ªán ph√¢n t√≠ch.'),
                    st.session_state.get('ai_analysis_2', 'Ch∆∞a th·ª±c hi·ªán ph√¢n t√≠ch.')
                )
                st.sidebar.download_button(
                    label="üì• T·∫£i xu·ªëng B√°o c√°o (.docx)",
                    data=report_data,
                    file_name=f"BaoCaoThamDinh_{st.session_state.get('ho_ten', 'KH')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    use_container_width=True
                )
                st.sidebar.success("ƒê√£ t·∫°o file b√°o c√°o!")
        else:
            st.sidebar.error("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o b√°o c√°o.")
