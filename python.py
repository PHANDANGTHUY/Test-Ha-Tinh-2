import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from docx import Document
import re
import io
import google.generativeai as genai
from datetime import datetime

# ==============================================================================
# C·∫§U H√åNH TRANG V√Ä BI·∫æN TO√ÄN C·ª§C
# ==============================================================================
st.set_page_config(
    page_title="Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n Kinh doanh",
    page_icon="üíº",
    layout="wide"
)

# ==============================================================================
# C√ÅC H√ÄM TI·ªÜN √çCH
# ==============================================================================

def format_currency(value):
    """ƒê·ªãnh d·∫°ng s·ªë th√†nh chu·ªói ti·ªÅn t·ªá v·ªõi d·∫•u ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n."""
    if isinstance(value, (int, float)):
        return f"{value:,.0f}".replace(",", ".")
    return value

def safe_float(value):
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang float m·ªôt c√°ch an to√†n, tr·∫£ v·ªÅ 0.0 n·∫øu l·ªói."""
    try:
        # X√≥a c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë (gi·ªØ l·∫°i d·∫•u th·∫≠p ph√¢n n·∫øu c√≥)
        if isinstance(value, str):
            value = re.sub(r'[^\d.]', '', value)
        return float(value)
    except (ValueError, TypeError):
        return 0.0

def extract_data_from_docx(uploaded_file):
    """Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file .docx ƒë∆∞·ª£c t·∫£i l√™n."""
    try:
        document = Document(uploaded_file)
        full_text = "\n".join([para.text for para in document.paragraphs])
        
        # S·ª≠ d·ª•ng regex ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin
        data = {
            'ho_ten': re.search(r"H·ªç v√† t√™n:\s*(.*?)\s*\.   Sinh ng√†y:", full_text).group(1).strip() if re.search(r"H·ªç v√† t√™n:\s*(.*?)\s*\.   Sinh ng√†y:", full_text) else "Kh√¥ng t√¨m th·∫•y",
            'cccd': re.search(r"CCCD s·ªë:\s*(\d+)", full_text).group(1).strip() if re.search(r"CCCD s·ªë:\s*(\d+)", full_text) else "Kh√¥ng t√¨m th·∫•y",
            'dia_chi': re.search(r"N∆°i c∆∞ tr√∫:\s*([^,]+,[^,]+,[^,]+)", full_text).group(1).strip() if re.search(r"N∆°i c∆∞ tr√∫:\s*([^,]+,[^,]+,[^,]+)", full_text) else "Kh√¥ng t√¨m th·∫•y",
            'sdt': re.search(r"S·ªë ƒëi·ªán tho·∫°i:\s*([\d\s,]+)", full_text).group(1).split(',')[0].strip() if re.search(r"S·ªë ƒëi·ªán tho·∫°i:\s*([\d\s,]+)", full_text) else "Kh√¥ng t√¨m th·∫•y",
            'muc_dich_vay': re.search(r"M·ª•c ƒë√≠ch vay:\s*(.*)", full_text).group(1).strip() if re.search(r"M·ª•c ƒë√≠ch vay:\s*(.*)", full_text) else "Kinh doanh v·∫≠t li·ªáu x√¢y d·ª±ng",
            'tong_chi_phi': re.search(r"T·ªîNG C·ªòNG,\s*([\d.,]+)", full_text.replace("\n", " ")).group(1).strip() if re.search(r"T·ªîNG C·ªòNG,\s*([\d.,]+)", full_text.replace("\n", " ")) else "7827181642",
            'tong_doanh_thu': re.search(r"T·ªîNG C·ªòNG,\s*([\d.,]+)", full_text.replace("\n", " "), re.DOTALL | re.IGNORECASE)[-1] if re.findall(r"T·ªîNG C·ªòNG,\s*([\d.,]+)", full_text.replace("\n", " ")) else "8050108000",
            'nhu_cau_von': re.search(r"Nhu c·∫ßu v·ªën l∆∞u ƒë·ªông tr√™n m·ªôt v√≤ng quay.*?([\d.,]+)", full_text).group(1).strip() if re.search(r"Nhu c·∫ßu v·ªën l∆∞u ƒë·ªông tr√™n m·ªôt v√≤ng quay.*?([\d.,]+)", full_text) else "7685931642",
            'von_doi_ung': re.search(r"V·ªën kh√°c,ƒë·ªìng,([\d.,]+)", full_text).group(1).strip() if re.search(r"V·ªën kh√°c,ƒë·ªìng,([\d.,]+)", full_text) else "385931642",
            'von_vay': re.search(r"V·ªën vay Agribank.*?([\d.,]+)", full_text).group(1).strip() if re.search(r"V·ªën vay Agribank.*?([\d.,]+)", full_text) else "7300000000",
            'lai_suat': re.search(r"L√£i su·∫•t ƒë·ªÅ ngh·ªã:\s*(\d+[\.,]?\d*)\s*%/nƒÉm", full_text).group(1).replace(',', '.').strip() if re.search(r"L√£i su·∫•t ƒë·ªÅ ngh·ªã:\s*(\d+[\.,]?\d*)\s*%/nƒÉm", full_text) else "5.0",
            'thoi_gian_vay': re.search(r"Th·ªùi h·∫°n cho vay:\s*(\d+)\s*th√°ng", full_text).group(1).strip() if re.search(r"Th·ªùi h·∫°n cho vay:\s*(\d+)\s*th√°ng", full_text) else "3",
            'full_text': full_text
        }
        return data
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Word: {e}")
        return None

def generate_repayment_schedule(principal, annual_rate, term_months):
    """T·∫°o b·∫£ng k·∫ø ho·∫°ch tr·∫£ n·ª£ chi ti·∫øt."""
    if term_months <= 0 or principal <= 0:
        return pd.DataFrame()
        
    monthly_rate = (annual_rate / 100) / 12
    principal_payment = principal / term_months
    
    schedule = []
    remaining_balance = principal
    
    for i in range(1, term_months + 1):
        interest_payment = remaining_balance * monthly_rate
        total_payment = principal_payment + interest_payment
        remaining_balance -= principal_payment
        
        schedule.append({
            'K·ª≥': i,
            'D∆∞ n·ª£ ƒë·∫ßu k·ª≥': remaining_balance + principal_payment,
            'G·ªëc tr·∫£': principal_payment,
            'L√£i tr·∫£': interest_payment,
            'T·ªïng tr·∫£': total_payment,
            'D∆∞ n·ª£ cu·ªëi k·ª≥': remaining_balance
        })
        
    df = pd.DataFrame(schedule)
    return df

def generate_report_text():
    """T·∫°o n·ªôi dung vƒÉn b·∫£n ƒë·ªÉ xu·∫•t b√°o c√°o."""
    report_data = st.session_state.report_data
    schedule_df = st.session_state.schedule_df

    text = f"""
B√ÅO C√ÅO PH√ÇN T√çCH PH∆Ø∆†NG √ÅN KINH DOANH
Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
=================================================

I. TH√îNG TIN KH√ÅCH H√ÄNG
-------------------------
- H·ªç v√† t√™n: {report_data['ho_ten']}
- CCCD: {report_data['cccd']}
- ƒê·ªãa ch·ªâ: {report_data['dia_chi']}
- S·ªë ƒëi·ªán tho·∫°i: {report_data['sdt']}

II. TH√îNG TIN KHO·∫¢N VAY
-------------------------
- M·ª•c ƒë√≠ch vay: {report_data['muc_dich_vay']}
- S·ªë ti·ªÅn vay: {format_currency(report_data['von_vay'])} VND
- L√£i su·∫•t: {report_data['lai_suat']}%/nƒÉm
- Th·ªùi gian vay: {report_data['thoi_gian_vay']} th√°ng

III. PH√ÇN T√çCH T√ÄI CH√çNH (1 V√íNG QUAY)
----------------------------------------
- T·ªïng chi ph√≠: {format_currency(report_data['tong_chi_phi'])} VND
- T·ªïng doanh thu: {format_currency(report_data['tong_doanh_thu'])} VND
- L·ª£i nhu·∫≠n: {format_currency(report_data['loi_nhuan'])} VND
- T·ª∑ su·∫•t l·ª£i nhu·∫≠n: {report_data['ty_suat_loi_nhuan']:.2f}%
- T·ªïng nhu c·∫ßu v·ªën: {format_currency(report_data['nhu_cau_von'])} VND
- V·ªën ƒë·ªëi ·ª©ng: {format_currency(report_data['von_doi_ung'])} VND

IV. K·∫æ HO·∫†CH TR·∫¢ N·ª¢
--------------------
{schedule_df.to_string(index=False)}

V. PH√ÇN T√çCH T·ª™ AI (N·∫æU C√ì)
-----------------------------
{st.session_state.get('ai_analysis', 'Ch∆∞a c√≥ ph√¢n t√≠ch t·ª´ AI.')}

=================================================
"""
    return text


# ==============================================================================
# KH·ªûI T·∫†O SESSION STATE
# ==============================================================================

if 'data_extracted' not in st.session_state:
    st.session_state.data_extracted = False
    st.session_state.report_data = {}
    st.session_state.schedule_df = pd.DataFrame()
    st.session_state.ai_analysis = ""
    st.session_state.full_text = ""

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []


# ==============================================================================
# GIAO DI·ªÜN - SIDEBAR
# ==============================================================================

with st.sidebar:
    st.header("Thi·∫øt l·∫≠p")
    
    # 1. Gemini API Key
    api_key = st.text_input("üîë Nh·∫≠p Gemini API Key", type="password", help="API Key c·ªßa b·∫°n s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ.")
    
    # 2. T·∫£i file l√™n
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n Ph∆∞∆°ng √°n Kinh doanh (.docx)",
        type=['docx'],
        accept_multiple_files=False
    )
    
    # X·ª≠ l√Ω khi c√≥ file m·ªõi
    if uploaded_file and not st.session_state.data_extracted:
        with st.spinner('ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file...'):
            extracted_data = extract_data_from_docx(uploaded_file)
            if extracted_data:
                st.session_state.report_data = {
                    'ho_ten': extracted_data.get('ho_ten', ''),
                    'cccd': extracted_data.get('cccd', ''),
                    'dia_chi': extracted_data.get('dia_chi', ''),
                    'sdt': extracted_data.get('sdt', ''),
                    'muc_dich_vay': extracted_data.get('muc_dich_vay', ''),
                    'tong_chi_phi': safe_float(extracted_data.get('tong_chi_phi', 0)),
                    'tong_doanh_thu': safe_float(extracted_data.get('tong_doanh_thu', 0)),
                    'nhu_cau_von': safe_float(extracted_data.get('nhu_cau_von', 0)),
                    'von_doi_ung': safe_float(extracted_data.get('von_doi_ung', 0)),
                    'von_vay': safe_float(extracted_data.get('von_vay', 0)),
                    'lai_suat': safe_float(extracted_data.get('lai_suat', 0)),
                    'thoi_gian_vay': int(safe_float(extracted_data.get('thoi_gian_vay', 0))),
                }
                st.session_state.full_text = extracted_data.get('full_text', '')
                st.session_state.data_extracted = True
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

    # 3. N√∫t xu·∫•t b√°o c√°o
    if st.session_state.data_extracted:
        st.download_button(
            label="üìÑ T·∫£i xu·ªëng B√°o c√°o (.txt)",
            data=generate_report_text(),
            file_name=f"Bao_cao_tham_dinh_{st.session_state.report_data.get('ho_ten', 'KH')}.txt",
            mime='text/plain',
        )

    # 4. N√∫t x√≥a cu·ªôc tr√≤ chuy·ªán
    if st.button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán"):
        st.session_state.messages = []
        st.rerun()

# ==============================================================================
# GIAO DI·ªÜN - TRANG CH√çNH
# ==============================================================================

st.title("üìä Th·∫©m ƒë·ªãnh Ph∆∞∆°ng √°n Kinh doanh c·ªßa Kh√°ch h√†ng")
st.markdown("---")

if not st.session_state.data_extracted:
    st.info("Vui l√≤ng t·∫£i l√™n file ph∆∞∆°ng √°n kinh doanh (.docx) ·ªü thanh b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
else:
    # --------------------------------------------------------------------------
    # KHU V·ª∞C NH·∫¨P LI·ªÜU V√Ä HI·ªÇN TH·ªä TH√îNG TIN
    # --------------------------------------------------------------------------
    col1, col2 = st.columns(2)

    with col1:
        with st.expander("üë§ **Th√¥ng tin kh√°ch h√†ng**", expanded=True):
            st.session_state.report_data['ho_ten'] = st.text_input("H·ªç v√† t√™n", value=st.session_state.report_data.get('ho_ten'))
            st.session_state.report_data['cccd'] = st.text_input("CCCD", value=st.session_state.report_data.get('cccd'))
            st.session_state.report_data['dia_chi'] = st.text_input("ƒê·ªãa ch·ªâ", value=st.session_state.report_data.get('dia_chi'))
            st.session_state.report_data['sdt'] = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=st.session_state.report_data.get('sdt'))

    with col2:
        with st.expander("üí∞ **Th√¥ng tin kho·∫£n vay**", expanded=True):
            st.session_state.report_data['muc_dich_vay'] = st.text_input("M·ª•c ƒë√≠ch vay", value=st.session_state.report_data.get('muc_dich_vay'))
            st.session_state.report_data['von_vay'] = st.number_input("S·ªë ti·ªÅn vay (VND)", min_value=0, value=int(st.session_state.report_data.get('von_vay')), step=1000000, format="%d")
            st.session_state.report_data['lai_suat'] = st.number_input("L√£i su·∫•t (%/nƒÉm)", min_value=0.0, value=st.session_state.report_data.get('lai_suat'), step=0.1, format="%.1f")
            st.session_state.report_data['thoi_gian_vay'] = st.number_input("Th·ªùi gian vay (th√°ng)", min_value=1, value=st.session_state.report_data.get('thoi_gian_vay'), step=1, format="%d")

    st.markdown("---")

    # --------------------------------------------------------------------------
    # KHU V·ª∞C PH√ÇN T√çCH V√Ä T√çNH TO√ÅN
    # --------------------------------------------------------------------------
    st.subheader("üìà Ph√¢n t√≠ch t√†i ch√≠nh v√† Tr·ª±c quan h√≥a")
    
    # L·∫•y d·ªØ li·ªáu t·ª´ session state ƒë·ªÉ t√≠nh to√°n
    total_cost = st.session_state.report_data.get('tong_chi_phi', 0)
    total_revenue = st.session_state.report_data.get('tong_doanh_thu', 0)
    loan_amount = st.session_state.report_data.get('von_vay', 0)
    equity = st.session_state.report_data.get('von_doi_ung', 0)

    # T√≠nh to√°n c√°c ch·ªâ s·ªë
    profit = total_revenue - total_cost
    profit_margin = (profit / total_revenue) * 100 if total_revenue > 0 else 0
    st.session_state.report_data['loi_nhuan'] = profit
    st.session_state.report_data['ty_suat_loi_nhuan'] = profit_margin

    # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ch√≠nh
    metric_col1, metric_col2, metric_col3 = st.columns(3)
    metric_col1.metric("L·ª£i nhu·∫≠n (1 v√≤ng quay)", f"{format_currency(profit)} VND", delta=f"{format_currency(profit)} VND")
    metric_col2.metric("T·ª∑ su·∫•t l·ª£i nhu·∫≠n", f"{profit_margin:.2f}%")
    metric_col3.metric("T·ªïng chi ph√≠ (1 v√≤ng quay)", f"{format_currency(total_cost)} VND")

    # Tr·ª±c quan h√≥a d·ªØ li·ªáu
    viz_col1, viz_col2 = st.columns(2)
    with viz_col1:
        st.markdown("##### C∆° c·∫•u Doanh thu")
        if total_revenue > 0:
            fig_pie = go.Figure(data=[go.Pie(
                labels=['T·ªïng chi ph√≠', 'L·ª£i nhu·∫≠n'],
                values=[total_cost, profit],
                hole=.3,
                marker_colors=['#ff9999', '#66b3ff']
            )])
            fig_pie.update_layout(showlegend=True)
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

    with viz_col2:
        st.markdown("##### C∆° c·∫•u Ngu·ªìn v·ªën")
        if (loan_amount + equity) > 0:
            fig_bar = go.Figure(data=[go.Bar(
                x=['V·ªën ƒë·ªëi ·ª©ng', 'V·ªën vay'],
                y=[equity, loan_amount],
                marker_color=['#4CAF50', '#F44336']
            )])
            fig_bar.update_layout(yaxis_title='S·ªë ti·ªÅn (VND)')
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu v·ªën ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

    st.markdown("---")

    # --------------------------------------------------------------------------
    # KHU V·ª∞C K·∫æ HO·∫†CH TR·∫¢ N·ª¢
    # --------------------------------------------------------------------------
    st.subheader("üóìÔ∏è K·∫ø ho·∫°ch tr·∫£ n·ª£ d·ª± ki·∫øn")
    schedule_df = generate_repayment_schedule(
        st.session_state.report_data['von_vay'],
        st.session_state.report_data['lai_suat'],
        st.session_state.report_data['thoi_gian_vay']
    )
    st.session_state.schedule_df = schedule_df

    if not schedule_df.empty:
        # ƒê·ªãnh d·∫°ng l·∫°i DataFrame ƒë·ªÉ hi·ªÉn th·ªã
        display_df = schedule_df.copy()
        for col in display_df.columns:
            if display_df[col].dtype == 'float64':
                display_df[col] = display_df[col].apply(format_currency)
        
        st.dataframe(display_df, use_container_width=True)

        # Chuy·ªÉn ƒë·ªïi DataFrame sang Excel ƒë·ªÉ t·∫£i xu·ªëng
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            schedule_df.to_excel(writer, index=False, sheet_name='KeHoachTraNo')
        excel_data = output.getvalue()

        st.download_button(
            label="üì• T·∫£i xu·ªëng K·∫ø ho·∫°ch tr·∫£ n·ª£ (.xlsx)",
            data=excel_data,
            file_name=f"Ke_hoach_tra_no_{st.session_state.report_data.get('ho_ten', 'KH')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kho·∫£n vay ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch tr·∫£ n·ª£.")

    st.markdown("---")
    
    # --------------------------------------------------------------------------
    # KHU V·ª∞C T√çCH H·ª¢P AI
    # --------------------------------------------------------------------------
    st.subheader("ü§ñ Ph√¢n t√≠ch t·ª´ Tr·ª£ l√Ω AI")
    if not api_key:
        st.warning("Vui l√≤ng nh·∫≠p Gemini API Key ·ªü thanh b√™n tr√°i ƒë·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng AI.")
    else:
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel('gemini-1.5-flash')
        except Exception as e:
            st.error(f"L·ªói khi c·∫•u h√¨nh Gemini: {e}")
            model = None

        if model:
            # N√∫t Ph√¢n t√≠ch nhanh
            if st.button("üöÄ AI Ph√¢n t√≠ch Nhanh", help="G·ª≠i to√†n b·ªô th√¥ng tin d·ª± √°n ƒë·∫øn AI ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch t·ªïng quan."):
                with st.spinner("AI ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù..."):
                    prompt = f"""
                    B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh t√≠n d·ª•ng gi√†u kinh nghi·ªám. D∆∞·ªõi ƒë√¢y l√† to√†n b·ªô ph∆∞∆°ng √°n kinh doanh c·ªßa kh√°ch h√†ng.
                    H√£y ph√¢n t√≠ch m·ªôt c√°ch ng·∫Øn g·ªçn, s√∫c t√≠ch v√† ƒë∆∞a ra k·∫øt lu·∫≠n.

                    {st.session_state.full_text}

                    ---
                    D·ª∞A V√ÄO D·ªÆ LI·ªÜU TR√äN, H√ÉY CUNG C·∫§P:
                    1.  **ƒêi·ªÉm m·∫°nh:** 2-3 g·∫°ch ƒë·∫ßu d√≤ng v·ªÅ c√°c ∆∞u ƒëi·ªÉm c·ªßa ph∆∞∆°ng √°n.
                    2.  **ƒêi·ªÉm y·∫øu:** 2-3 g·∫°ch ƒë·∫ßu d√≤ng v·ªÅ c√°c nh∆∞·ª£c ƒëi·ªÉm ho·∫∑c ƒëi·ªÉm c·∫ßn l√†m r√µ.
                    3.  **R·ªßi ro:** 2-3 g·∫°ch ƒë·∫ßu d√≤ng v·ªÅ c√°c r·ªßi ro ti·ªÅm ·∫©n.
                    4.  **ƒê·ªÅ xu·∫•t cu·ªëi c√πng:** In ƒë·∫≠m v√† ch·ªâ ghi m·ªôt trong hai c·ª•m t·ª´: "N√äN CHO VAY" ho·∫∑c "KH√îNG N√äN CHO VAY".
                    """
                    try:
                        response = model.generate_content(prompt)
                        st.session_state.ai_analysis = response.text
                        st.markdown(st.session_state.ai_analysis)
                    except Exception as e:
                        st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API c·ªßa Gemini: {e}")

            # Chatbox t∆∞∆°ng t√°c
            st.markdown("##### Tr√≤ chuy·ªán v·ªõi Tr·ª£ l√Ω AI")

            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])

            if prompt := st.chat_input("ƒê·∫∑t c√¢u h·ªèi v·ªÅ ph∆∞∆°ng √°n kinh doanh n√†y..."):
                st.session_state.messages.append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)

                with st.chat_message("assistant"):
                    with st.spinner("AI ƒëang suy nghƒ©..."):
                        context_prompt = f"""
                        ƒê√¢y l√† b·ªëi c·∫£nh c·ªßa ph∆∞∆°ng √°n kinh doanh ƒëang ƒë∆∞·ª£c th·∫©m ƒë·ªãnh:
                        {st.session_state.full_text}
                        ---
                        D·ª±a v√†o b·ªëi c·∫£nh tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch chuy√™n nghi·ªáp v√† ng·∫Øn g·ªçn.
                        C√¢u h·ªèi: {prompt}
                        """
                        try:
                            response = model.generate_content(context_prompt)
                            response_text = response.text
                            st.markdown(response_text)
                            st.session_state.messages.append({"role": "assistant", "content": response_text})
                        except Exception as e:
                            error_message = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {e}"
                            st.markdown(error_message)
                            st.session_state.messages.append({"role": "assistant", "content": error_message})
